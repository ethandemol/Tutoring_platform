import { CobraError } from "./cobra_errors";
export declare enum PvStatus {
    SUCCESS = 10000,
    OUT_OF_MEMORY = 10001,
    IO_ERROR = 10002,
    INVALID_ARGUMENT = 10003,
    STOP_ITERATION = 10004,
    KEY_ERROR = 10005,
    INVALID_STATE = 10006,
    RUNTIME_ERROR = 10007,
    ACTIVATION_ERROR = 10008,
    ACTIVATION_LIMIT_REACHED = 10009,
    ACTIVATION_THROTTLED = 10010,
    ACTIVATION_REFUSED = 10011
}
export type CobraOptions = {
    /** @defaultValue undefined */
    processErrorCallback?: (error: CobraError) => void;
};
export type CobraWorkerInitRequest = {
    command: 'init';
    accessKey: string;
    wasm: string;
    wasmSimd: string;
    sdk: string;
    options: CobraOptions;
};
export type CobraWorkerProcessRequest = {
    command: 'process';
    inputFrame: Int16Array;
};
export type CobraWorkerReleaseRequest = {
    command: 'release';
};
export type CobraWorkerRequest = CobraWorkerInitRequest | CobraWorkerProcessRequest | CobraWorkerReleaseRequest;
export type CobraWorkerFailureResponse = {
    command: 'failed' | 'error';
    status: PvStatus;
    shortMessage: string;
    messageStack: string[];
};
export type CobraWorkerInitResponse = CobraWorkerFailureResponse | {
    command: 'ok';
    frameLength: number;
    sampleRate: number;
    version: string;
};
export type CobraWorkerProcessResponse = CobraWorkerFailureResponse | {
    command: 'ok';
    voiceProbability: number;
};
export type CobraWorkerReleaseResponse = CobraWorkerFailureResponse | {
    command: 'ok';
};
export type CobraWorkerResponse = CobraWorkerInitResponse | CobraWorkerProcessResponse | CobraWorkerReleaseResponse;
//# sourceMappingURL=types.d.ts.map
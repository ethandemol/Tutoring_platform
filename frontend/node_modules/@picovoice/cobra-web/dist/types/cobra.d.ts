import { CobraOptions } from './types';
export declare class Cobra {
    private readonly _pvCobraDelete;
    private readonly _pvCobraProcess;
    private readonly _pvGetErrorStack;
    private readonly _pvFreeErrorStack;
    private _wasmMemory;
    private readonly _pvFree;
    private readonly _processMutex;
    private readonly _objectAddress;
    private readonly _inputBufferAddress;
    private readonly _voiceProbabilityAddress;
    private readonly _messageStackAddressAddressAddress;
    private readonly _messageStackDepthAddress;
    private static _frameLength;
    private static _sampleRate;
    private static _version;
    private static _wasm;
    private static _wasmSimd;
    private static _sdk;
    private static _cobraMutex;
    private readonly _voiceProbabilityCallback;
    private readonly _processErrorCallback?;
    private constructor();
    /**
     * Get Cobra engine version.
     */
    get version(): string;
    /**
     * Get frame length.
     */
    get frameLength(): number;
    /**
     * Get sample rate.
     */
    get sampleRate(): number;
    /**
     * Set base64 wasm file.
     * @param wasm Base64'd wasm file to use to initialize wasm.
     */
    static setWasm(wasm: string): void;
    /**
     * Set base64 wasm file with SIMD feature.
     * @param wasmSimd Base64'd wasm file to use to initialize wasm.
     */
    static setWasmSimd(wasmSimd: string): void;
    static setSdk(sdk: string): void;
    /**
     * Creates an instance of the Picovoice Cobra VAD engine.
     * Behind the scenes, it requires the WebAssembly code to load and initialize before
     * it can create an instance.
     *
     * @param accessKey AccessKey obtained from Picovoice Console (https://console.picovoice.ai/)
     * @param voiceProbabilityCallback User-defined callback to run after receiving voice probability result.
     * @param options Optional configuration arguments.
     * @param options.processErrorCallback User-defined callback invoked if any error happens while processing audio.
     *
     * @returns An instance of the Cobra engine.
     */
    static create(accessKey: string, voiceProbabilityCallback: (voiceProbability: number) => void, options?: CobraOptions): Promise<Cobra>;
    /**
     * Processes a frame of audio. The number of samples per frame can be attained by calling
     * '.frameLength'. The incoming audio needs to have a sample rate equal to '.sampleRate' and be 16-bit
     * linearly-encoded. Cobra operates on single-channel audio. Calls user-defined `voiceProbabilityCallback` when a
     * result has been obtained from Cobra.
     *
     * @param pcm A frame of audio with properties described above.
     */
    process(pcm: Int16Array): Promise<void>;
    /**
     * Releases resources acquired by WebAssembly module.
     */
    release(): Promise<void>;
    onmessage(e: MessageEvent): Promise<void>;
    private static initWasm;
    private static getMessageStack;
}
//# sourceMappingURL=cobra.d.ts.map
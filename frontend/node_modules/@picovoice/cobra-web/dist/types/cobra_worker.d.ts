import { CobraOptions } from './types';
export declare class CobraWorker {
    private readonly _worker;
    private readonly _version;
    private readonly _frameLength;
    private readonly _sampleRate;
    private static _sdk;
    private static _wasm;
    private static _wasmSimd;
    private constructor();
    /**
     * Get Cobra engine version.
     */
    get version(): string;
    /**
     * Get require number of samples per frame.
     */
    get frameLength(): number;
    /**
     * Get required sample rate.
     */
    get sampleRate(): number;
    /**
     * Get Cobra worker instance.
     */
    get worker(): Worker;
    /**
     * Set base64 wasm file.
     * @param wasm Base64'd wasm file to use to initialize wasm.
     */
    static setWasm(wasm: string): void;
    /**
     * Set base64 wasm file with SIMD feature.
     * @param wasmSimd Base64'd wasm file to use to initialize wasm.
     */
    static setWasmSimd(wasmSimd: string): void;
    static setSdk(sdk: string): void;
    /**
     * Creates a worker instance of the Picovoice Cobra VAD engine.
     * Behind the scenes, it requires the WebAssembly code to load and initialize before
     * it can create an instance.
     *
     * @param accessKey AccessKey obtained from Picovoice Console (https://console.picovoice.ai/)
     * @param voiceProbabilityCallback User-defined callback to run after receiving voice probability result.
     * @param options Optional configuration arguments.
     * @param options.processErrorCallback User-defined callback invoked if any error happens while processing audio.
     *
     * @returns An instance of CobraWorker.
     */
    static create(accessKey: string, voiceProbabilityCallback: (voiceProbability: number) => void, options?: CobraOptions): Promise<CobraWorker>;
    /**
     * Processes a frame of audio in a worker.
     * The voice probability result will be sent via the user provided voiceProbabilityCallback.
     * It is also possible to send a message directly using 'this.worker.postMessage({command: "process", pcm: [...]})'.
     *
     * @param pcm A frame of audio samples.
     */
    process(pcm: Int16Array): void;
    /**
     * Releases resources acquired by WebAssembly module.
     */
    release(): Promise<void>;
    /**
     * Terminates the active worker. Stops all requests being handled by worker.
     */
    terminate(): void;
}
//# sourceMappingURL=cobra_worker.d.ts.map
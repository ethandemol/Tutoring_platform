import { PvError } from "@picovoice/web-utils";
import { PvStatus } from "./types";
declare class CobraError extends Error {
    private readonly _status;
    private readonly _shortMessage;
    private readonly _messageStack;
    constructor(status: PvStatus, message: string, messageStack?: string[], pvError?: PvError | null);
    get status(): PvStatus;
    get shortMessage(): string;
    get messageStack(): string[];
    private static errorToString;
}
declare class CobraOutOfMemoryError extends CobraError {
    constructor(message: string, messageStack?: string[], pvError?: PvError | null);
}
declare class CobraIOError extends CobraError {
    constructor(message: string, messageStack?: string[], pvError?: PvError | null);
}
declare class CobraInvalidArgumentError extends CobraError {
    constructor(message: string, messageStack?: string[], pvError?: PvError | null);
}
declare class CobraStopIterationError extends CobraError {
    constructor(message: string, messageStack?: string[], pvError?: PvError | null);
}
declare class CobraKeyError extends CobraError {
    constructor(message: string, messageStack?: string[], pvError?: PvError | null);
}
declare class CobraInvalidStateError extends CobraError {
    constructor(message: string, messageStack?: string[], pvError?: PvError | null);
}
declare class CobraRuntimeError extends CobraError {
    constructor(message: string, messageStack?: string[], pvError?: PvError | null);
}
declare class CobraActivationError extends CobraError {
    constructor(message: string, messageStack?: string[], pvError?: PvError | null);
}
declare class CobraActivationLimitReachedError extends CobraError {
    constructor(message: string, messageStack?: string[], pvError?: PvError | null);
}
declare class CobraActivationThrottledError extends CobraError {
    constructor(message: string, messageStack?: string[], pvError?: PvError | null);
}
declare class CobraActivationRefusedError extends CobraError {
    constructor(message: string, messageStack?: string[], pvError?: PvError | null);
}
export { CobraError, CobraOutOfMemoryError, CobraIOError, CobraInvalidArgumentError, CobraStopIterationError, CobraKeyError, CobraInvalidStateError, CobraRuntimeError, CobraActivationError, CobraActivationLimitReachedError, CobraActivationThrottledError, CobraActivationRefusedError, };
export declare function pvStatusToException(pvStatus: PvStatus, errorMessage: string, messageStack?: string[], pvError?: PvError | null): CobraError;
//# sourceMappingURL=cobra_errors.d.ts.map